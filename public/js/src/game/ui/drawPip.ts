import Suit from '../../Suit';

const shapeFunctions: Map<string, (ctx: CanvasRenderingContext2D) => Array<any>> = new Map();
const sf = 3; // Scale factor

shapeFunctions.set('hanabi_red', (ctx: CanvasRenderingContext2D) => {

    ctx.beginPath();    
    ctx.scale(sf,sf);
    ctx.translate(-40.903844, -80.253155);
	ctx.moveTo(47.530531, 88.392690);
	ctx.bezierCurveTo(29.757962, 90.070210, 31.193616, 78.987850, 34.277276, 72.111260);
	ctx.bezierCurveTo(52.049847, 70.433711, 50.616495, 81.516100, 47.530531, 88.392690);
	ctx.moveTo(38.201088, 59.405974);
	ctx.bezierCurveTo(36.488459, 59.405974, 35.161286, 62.901259, 34.279579, 66.242170);
	ctx.bezierCurveTo(11.602243, 72.595989, 17.005567, 101.105070, 43.609027, 101.100330);
	ctx.bezierCurveTo(45.321658, 101.100330, 46.646522, 97.604970, 47.530531, 94.261780);
	ctx.bezierCurveTo(70.205570, 87.912670, 64.799917, 59.401233, 38.201088, 59.405974);
    ctx.scale(1/sf, 1/sf);
    ctx.closePath();

    return [];
});

shapeFunctions.set('hanabi_yellow', (ctx: CanvasRenderingContext2D) => {

    ctx.beginPath();    
    ctx.scale(sf, sf);
    ctx.translate(-58.029065, -70.265748);
    ctx.moveTo(48.471374, 76.245007);
    ctx.bezierCurveTo(52.478308, 74.048764, 57.340783, 70.758733, 60.960015, 66.938100);
    ctx.bezierCurveTo(60.918765, 71.616441, 61.423545, 77.451433, 63.024126, 82.374519);
    ctx.bezierCurveTo(59.019361, 79.968190, 53.639232, 77.395132, 48.471374, 76.245007);
    ctx.moveTo(78.213664, 83.015659);
    ctx.bezierCurveTo(74.748208, 79.849062, 67.217334, 70.373217, 64.219708, 62.721080);
    ctx.bezierCurveTo(64.353955, 62.493950, 64.505635, 62.265928, 64.629079, 62.034484);
    ctx.bezierCurveTo(64.629079, 62.034484, 66.385639, 60.000655, 63.054465, 55.839957);
    ctx.bezierCurveTo(59.727624, 51.679247, 56.955259, 51.308840, 56.214513, 51.402032);
    ctx.bezierCurveTo(55.473773, 51.495022, 54.735194, 51.633868, 54.460129, 52.881296);
    ctx.bezierCurveTo(53.420489, 57.587859, 48.768108, 69.322751, 43.468126, 75.640741);
    ctx.bezierCurveTo(43.271019, 75.640741, 43.069626, 75.626481, 42.876825, 75.633641);
    ctx.bezierCurveTo(42.876825, 75.633641, 40.236578, 75.126788, 38.300255, 80.091092);
    ctx.bezierCurveTo(36.359599, 85.053189, 37.427400, 87.641479, 37.875753, 88.234939);
    ctx.bezierCurveTo(38.324091, 88.830219, 38.815757, 89.402319, 40.032999, 89.016809);
    ctx.bezierCurveTo(44.609566, 87.567769, 57.020243, 85.739789, 65.144575, 87.138969);
    ctx.bezierCurveTo(65.166335, 87.171069, 65.183225, 87.212469, 65.205475, 87.244869);
    ctx.bezierCurveTo(65.205475, 87.244869, 66.084837, 89.785519, 71.354499, 88.984149);
    ctx.bezierCurveTo(76.622002, 88.180599, 78.326561, 85.962679, 78.618964, 85.278249);
    ctx.bezierCurveTo(78.907030, 84.591659, 79.160440, 83.876899, 78.213916, 83.017049);  
    ctx.scale(1/sf, 1/sf);
    ctx.closePath();

    return [];
});

shapeFunctions.set('hanabi_green', (ctx: CanvasRenderingContext2D) => {

    ctx.beginPath();    
    ctx.scale(sf, sf);
    ctx.translate(-37.891880, -52.702171);
    ctx.moveTo(56.910015, 58.292302);
	ctx.bezierCurveTo(55.483093, 57.138514, 52.978323, 54.513890, 49.381539, 52.702161);
	ctx.bezierCurveTo(52.978323, 50.888050, 55.483093, 48.265810, 56.910015, 47.112026);
	ctx.bezierCurveTo(59.841692, 44.740087, 58.374671, 43.555312, 58.374671, 43.555312);
	ctx.bezierCurveTo(55.737819, 38.372817, 52.749542, 35.352476, 49.728244, 32.591968);
	ctx.bezierCurveTo(47.638570, 30.684887, 47.214037, 32.868471, 46.836666, 34.568186);
	ctx.bezierCurveTo(46.277710, 37.083148, 45.362573, 39.512295, 44.150277, 41.779343);
	ctx.bezierCurveTo(42.449773, 44.964172, 40.294055, 47.336103, 37.893058, 49.669898);
	ctx.bezierCurveTo(35.489700, 47.336103, 33.333993, 44.964172, 31.633476, 41.779343);
	ctx.bezierCurveTo(30.423545, 39.512295, 29.506070, 37.083148, 28.949451, 34.568186);
	ctx.bezierCurveTo(28.569708, 32.868496, 28.145185, 30.684887, 26.055515, 32.591968);
	ctx.bezierCurveTo(23.034217, 35.352476, 20.045939, 38.372817, 17.409083, 43.555312);
	ctx.bezierCurveTo(17.409083, 43.555312, 15.942073, 44.740087, 18.873743, 47.112026);
	ctx.bezierCurveTo(20.303023, 48.265810, 22.807798, 50.888050, 26.402219, 52.702161);
	ctx.bezierCurveTo(22.807798, 54.513890, 20.303023, 57.138514, 18.873743, 58.292302);
	ctx.bezierCurveTo(15.942073, 60.661853, 17.409083, 61.846624, 17.409083, 61.846624);
	ctx.bezierCurveTo(20.045939, 67.031506, 23.034217, 70.051852, 26.055515, 72.812352);
	ctx.bezierCurveTo(28.145185, 74.719433, 28.569729, 72.535849, 28.949451, 70.836141);
	ctx.bezierCurveTo(29.506055, 68.321168, 30.423545, 65.892021, 31.633476, 63.622593);
	ctx.bezierCurveTo(33.333993, 60.440152, 35.489700, 58.065829, 37.893058, 55.734422);
	ctx.bezierCurveTo(40.294055, 58.065829, 42.449773, 60.440152, 44.150277, 63.622593);
	ctx.bezierCurveTo(45.362573, 65.892021, 46.277689, 68.321168, 46.836666, 70.836141);
	ctx.bezierCurveTo(47.214058, 72.535820, 47.638570, 74.719433, 49.728244, 72.812352);
	ctx.bezierCurveTo(52.749542, 70.051852, 55.737819, 67.031506, 58.374671, 61.846624);
	ctx.bezierCurveTo(58.374671, 61.846624, 59.841692, 60.661853, 56.910015, 58.292302); 
    ctx.scale(1/sf, 1/sf);
    ctx.closePath();

    return [];
});

shapeFunctions.set('hanabi_blue', (ctx: CanvasRenderingContext2D) => {

    ctx.beginPath();    
    ctx.scale(sf, sf);
    ctx.translate(-99.694341, -76.779331);
    ctx.moveTo(56.910015, 58.292302);
	ctx.moveTo(115.297820, 63.128745);
	ctx.bezierCurveTo(115.509040, 62.943572, 115.738420, 62.783730, 115.940900, 62.592635);
	ctx.bezierCurveTo(116.136780, 62.405678, 117.727300, 61.097621, 118.499320, 60.145425);
	ctx.bezierCurveTo(118.991050, 59.542738, 118.503320, 59.119802, 118.070180, 59.159833);
	ctx.bezierCurveTo(85.907335, 62.087565, 79.611335, 57.902868, 79.611335, 57.902868);
	ctx.bezierCurveTo(76.592380, 67.042068, 83.408965, 72.218957, 83.408965, 72.218957);
	ctx.bezierCurveTo(83.423265, 72.226057, 83.506365, 72.240367, 83.548825, 72.247497);
	ctx.bezierCurveTo(81.513235, 82.240997, 82.770205, 92.034227, 83.053065, 92.330067);
	ctx.bezierCurveTo(83.053065, 92.330067, 88.939675, 98.539287, 97.700645, 94.541477);
	ctx.bezierCurveTo(97.700645, 94.541477, 94.483705, 90.692697, 92.968635, 71.800370);
	ctx.bezierCurveTo(97.351385, 71.230615, 102.626210, 70.080615, 107.502750, 67.947093);
	ctx.bezierCurveTo(103.987710, 79.224239, 105.578380, 91.991907, 105.903200, 92.330067);
	ctx.bezierCurveTo(105.903200, 92.330067, 111.792060, 98.539287, 120.546360, 94.541477);
	ctx.bezierCurveTo(120.546360, 94.541477, 116.388350, 89.549157, 115.298220, 63.130560);
    ctx.scale(1/sf, 1/sf);
    ctx.closePath();

    return [];
});

shapeFunctions.set('hanabi_white', (ctx: CanvasRenderingContext2D) => {

    ctx.scale(1/4, 1/4);
    ctx.beginPath();
    ctx.scale(sf, sf);
    ctx.translate(-240.369510, -310.428580);
	ctx.moveTo(209.327830, 329.846360);
	ctx.bezierCurveTo(216.849460, 315.634430, 219.839680, 297.640580, 220.325480, 276.661860);
	ctx.bezierCurveTo(234.196070, 285.099130, 251.986610, 288.635170, 272.943280, 289.372890);
	ctx.bezierCurveTo(264.659440, 303.398260, 261.200170, 321.383680, 260.479860, 342.557400);
	ctx.bezierCurveTo(246.935910, 334.289740, 229.664680, 330.702830, 209.327830, 329.846360);
	ctx.moveTo(304.880800, 333.662260);
	ctx.bezierCurveTo(303.088380, 316.813130, 302.359660, 300.014880, 303.783570, 283.123360);
	ctx.bezierCurveTo(305.860820, 280.554030, 307.979940, 276.984060, 309.914790, 271.955650);
	ctx.bezierCurveTo(317.419640, 252.528700, 313.290280, 242.403970, 311.556460, 240.080500);
	ctx.bezierCurveTo(309.822620, 237.748600, 307.921290, 235.509970, 303.205620, 237.019350);
	ctx.bezierCurveTo(290.675200, 241.038730, 277.248530, 243.006030, 264.207130, 244.422120);
	ctx.bezierCurveTo(247.488720, 246.236790, 230.803810, 246.982950, 214.018390, 245.507520);
	ctx.bezierCurveTo(212.560970, 245.379990, 211.019790, 245.185460, 209.478620, 244.972960);
	ctx.bezierCurveTo(207.652640, 243.929950, 205.541890, 242.903900, 203.054250, 241.920280);
	ctx.bezierCurveTo(183.864910, 234.330970, 173.864020, 238.511450, 171.569010, 240.266750);
	ctx.bezierCurveTo(169.265590, 242.022040, 167.054350, 243.946940, 168.545270, 248.712520);
	ctx.bezierCurveTo(172.515480, 261.398080, 174.458700, 274.999490, 175.857500, 288.185380);
	ctx.bezierCurveTo(177.541050, 304.084790, 178.219520, 319.950260, 177.105490, 335.875090);
	ctx.bezierCurveTo(174.978020, 338.452910, 172.808640, 342.065260, 170.823550, 347.212420);
	ctx.bezierCurveTo(163.318660, 366.639360, 167.448030, 376.772610, 169.190200, 379.096040);
	ctx.bezierCurveTo(170.924060, 381.427910, 172.817020, 383.666550, 177.532680, 382.148680);
	ctx.bezierCurveTo(190.063140, 378.137810, 203.489780, 376.162040, 216.522770, 374.745950);
	ctx.bezierCurveTo(233.207690, 372.939800, 249.850720, 372.202040, 266.577530, 373.660550);
	ctx.bezierCurveTo(269.123820, 375.780470, 272.666880, 377.942800, 277.675670, 379.927010);
	ctx.bezierCurveTo(296.865020, 387.516350, 306.874310, 383.335860, 309.160920, 381.580540);
	ctx.bezierCurveTo(311.472710, 379.825280, 313.675590, 377.900380, 312.193020, 373.134800);
	ctx.bezierCurveTo(308.214450, 360.449210, 306.271230, 346.847800, 304.880800, 333.661900);
    ctx.scale(1/sf, 1/sf);    
    ctx.closePath();
    ctx.scale(4,4);

    return [];
});

shapeFunctions.set('hanabi_alt_white', (ctx: CanvasRenderingContext2D) => {

    ctx.beginPath();
    ctx.scale(sf, sf);
    
	ctx.translate(-74.155390, -82.208377);
    ctx.transform(-3.299668, 1.133672, -1.200981, -3.114738, 480.922540, 360.609040);
    ctx.transform(0.282222, 0, 0, 0.282222, 74.155397, 112.541770);
    ctx.moveTo(28.347656, 0.312500);
    ctx.bezierCurveTo(27.666150, 0.315561, 26.899434, 0.557678, 26.056641, 1.035156);
    ctx.bezierCurveTo(24.331812, 2.012365, 22.721615, 3.689235, 20.039062, 7.302734);
    ctx.bezierCurveTo(16.394722, 12.211809, 16.585492, 12.102236, 9.349609, 13.371094);
    ctx.bezierCurveTo(3.625216, 14.374948, 1.072572, 15.300497, 0.476563, 16.585938);
    ctx.bezierCurveTo(-0.119634, 17.871768, 0.743099, 19.083487, 5.179688, 23.181641);
    ctx.bezierCurveTo(8.308318, 26.071597, 9.246576, 27.098502, 9.529297, 27.947266);
    ctx.bezierCurveTo(9.727531, 28.542435, 10.004965, 31.058070, 10.146484, 33.537109);
    ctx.bezierCurveTo(10.434059, 38.574062, 10.889828, 40.396472, 12.142578, 41.515625);
    ctx.lineTo(12.142578, 41.517625);
    ctx.bezierCurveTo(13.038688, 42.318129, 14.019224, 42.435651, 15.210938, 41.882859);
    ctx.bezierCurveTo(16.474513, 41.296867, 19.547233, 38.243507, 22.160156, 34.978563);
    ctx.bezierCurveTo(24.800264, 31.679638, 26.328861, 30.274372, 27.921875, 29.679735);
    ctx.bezierCurveTo(28.475513, 29.473089, 30.772060, 28.951228, 33.025391, 28.521531);
    ctx.bezierCurveTo(38.227387, 27.529583, 39.684318, 27.140709, 40.884766, 26.418016);
    ctx.bezierCurveTo(43.257594, 24.989461, 42.659074, 23.724034, 37.429688, 19.119188);
    ctx.bezierCurveTo(35.287418, 17.232720, 33.308731, 15.289797, 33.033203, 14.802734);
    ctx.bezierCurveTo(32.651245, 14.127522, 32.480019, 12.921518, 32.308594, 9.722656);
    ctx.bezierCurveTo(32.011232, 4.173873, 31.555509, 2.353547, 30.128906, 1.017578);
    ctx.bezierCurveTo(29.626019, 0.545574, 29.029163, 0.309439, 28.347656, 0.312500);
    ctx.moveTo(23.660156, 14.164062);
    ctx.bezierCurveTo(23.891052, 14.162862, 24.093294, 14.243072, 24.263672, 14.402344);
    ctx.bezierCurveTo(24.747004, 14.854930, 24.901206, 15.471590, 25.001953, 17.351562);
    ctx.bezierCurveTo(25.060063, 18.435318, 25.118645, 18.843510, 25.248047, 19.072266);
    ctx.bezierCurveTo(25.341377, 19.237384, 26.012481, 19.896050, 26.738281, 20.535156);
    ctx.bezierCurveTo(28.510006, 22.095274, 28.712119, 22.523797, 27.908203, 23.007812);
    ctx.bezierCurveTo(27.501492, 23.252655, 27.008535, 23.384620, 25.246094, 23.720703);
    ctx.bezierCurveTo(24.482663, 23.866333, 23.703201, 24.043407, 23.515625, 24.113281);
    ctx.bezierCurveTo(22.975912, 24.314541, 22.458926, 24.790538, 21.564453, 25.908203);
    ctx.bezierCurveTo(20.679193, 27.014388, 19.639040, 28.049480, 19.210938, 28.248047);
    ctx.bezierCurveTo(18.807185, 28.435488, 18.473523, 28.394464, 18.169922, 28.123047);
    ctx.bezierCurveTo(17.746338, 27.743791, 17.591485, 27.126937, 17.494141, 25.421875);
    ctx.bezierCurveTo(17.446201, 24.582005, 17.352337, 23.728993, 17.285156, 23.527344);
    ctx.bezierCurveTo(17.189386, 23.239982, 16.870531, 22.891231, 15.810547, 21.912109);
    ctx.bezierCurveTo(14.307426, 20.523665, 14.014804, 20.113384, 14.216797, 19.677734);
    ctx.bezierCurveTo(14.418730, 19.242227, 15.285177, 18.929930, 17.224609, 18.589844);
    ctx.bezierCurveTo(19.676131, 18.159934, 19.610992, 18.196431, 20.845703, 16.533203);
    ctx.bezierCurveTo(21.754551, 15.308955, 22.300389, 14.739290, 22.884766, 14.408203);
    ctx.bezierCurveTo(23.170303, 14.246451, 23.429261, 14.165214, 23.660156, 14.164062);
    ctx.scale(1/sf, 1/sf);
    ctx.closePath();

    return [];
});

shapeFunctions.set('hanabi_alt_blue', (ctx: CanvasRenderingContext2D) => {

    ctx.beginPath();    
    ctx.scale(sf, sf);
    ctx.translate(-110.389020, -72.869975);
    ctx.moveTo(110.591250, 92.432703);
    ctx.bezierCurveTo(110.335530, 91.719873, 109.714350, 89.303503, 109.211720, 87.062783);
    ctx.bezierCurveTo(107.742180, 80.511323, 107.008270, 78.670889, 105.865310, 78.670889);
    ctx.bezierCurveTo(105.005550, 78.670889, 101.643350, 81.653913, 99.324992, 84.473613);
    ctx.bezierCurveTo(95.926692, 88.606593, 95.838462, 88.675133, 93.975532, 88.631263);
    ctx.bezierCurveTo(92.231172, 88.590163, 90.310202, 87.941073, 89.701562, 87.187223);
    ctx.bezierCurveTo(89.131002, 86.480403, 89.897362, 85.251163, 93.121472, 81.703793);
    ctx.bezierCurveTo(97.905302, 76.439922, 98.141182, 75.093343, 94.937532, 71.340155);
    ctx.bezierCurveTo(93.214542, 69.321734, 92.383512, 67.945448, 92.383512, 67.110557);
    ctx.bezierCurveTo(92.383512, 66.280178, 95.395062, 62.434319, 95.776182, 62.778020);
    ctx.bezierCurveTo(95.909182, 62.897960, 96.790542, 63.776806, 97.734912, 64.731146);
    ctx.bezierCurveTo(101.319560, 68.353598, 103.590820, 69.302262, 105.345040, 67.909572);
    ctx.bezierCurveTo(106.121380, 67.293254, 106.144370, 67.193035, 105.952910, 65.255957);
    ctx.bezierCurveTo(105.843170, 64.148763, 105.474960, 61.965460, 105.134010, 60.404152);
    ctx.bezierCurveTo(103.813300, 54.355863, 104.761230, 52.011272, 108.527000, 52.011272);
    ctx.bezierCurveTo(109.624470, 52.011272, 109.888350, 52.120274, 110.394700, 52.780938);
    ctx.bezierCurveTo(111.125640, 53.735243, 111.169060, 53.924532, 112.109940, 60.262548);
    ctx.bezierCurveTo(112.741060, 64.513842, 112.982900, 65.512454, 113.476390, 65.904165);
    ctx.bezierCurveTo(114.762890, 66.925529, 116.967890, 65.447542, 121.179640, 60.740508);
    ctx.bezierCurveTo(125.207390, 56.239247, 126.422930, 55.508035, 128.496350, 56.339188);
    ctx.bezierCurveTo(129.871370, 56.890453, 131.251180, 57.930871, 131.247700, 58.413843);
    ctx.bezierCurveTo(131.246700, 58.625498, 129.861460, 60.430251, 128.170620, 62.423316);
    ctx.bezierCurveTo(124.784150, 66.414798, 123.959780, 67.936204, 123.981360, 70.154646);
    ctx.bezierCurveTo(123.995560, 71.758322, 124.419280, 72.583018, 126.591040, 75.250640);
    ctx.bezierCurveTo(128.107910, 77.113707, 128.206250, 78.221674, 127.022410, 80.107833);
    ctx.bezierCurveTo(126.098030, 81.580483, 125.338230, 82.027523, 124.421420, 81.637993);
    ctx.bezierCurveTo(124.085970, 81.495103, 122.830830, 80.446963, 121.632780, 79.308273);
    ctx.bezierCurveTo(119.011730, 76.816960, 118.077770, 76.202402, 116.912780, 76.202402);
    ctx.bezierCurveTo(115.314390, 76.202402, 114.918520, 77.084076, 114.977540, 80.512803);
    ctx.bezierCurveTo(115.005940, 82.147213, 115.257980, 84.428633, 115.537170, 85.582623);
    ctx.bezierCurveTo(116.427160, 89.254553, 116.499620, 90.696633, 115.824690, 91.302373);
    ctx.bezierCurveTo(115.195060, 91.867403, 111.732710, 93.728673, 111.311270, 93.728673);
    ctx.bezierCurveTo(111.171620, 93.728673, 110.847760, 93.145433, 110.591460, 92.432703);
    ctx.scale(1/sf, 1/sf);
    ctx.closePath();

    return [];
});

shapeFunctions.set('white_moon', (ctx: CanvasRenderingContext2D) => {

    ctx.scale(1/4, 1/4);
    ctx.beginPath();    
    ctx.scale(sf, sf);
    ctx.translate(-414.893820, -203.536190);
	ctx.moveTo(374.946290, 141.086530);
	ctx.bezierCurveTo(340.464470, 163.156500, 330.404130, 209.013710, 352.476550, 243.488280);
	ctx.bezierCurveTo(374.549450, 277.965450, 420.410390, 288.024390, 454.892220, 265.955190);
	ctx.bezierCurveTo(477.025720, 251.788400, 489.042880, 227.834330, 489.011380, 203.371390);
	ctx.bezierCurveTo(485.262300, 214.509460, 477.910800, 224.512670, 467.241500, 231.341400);
	ctx.bezierCurveTo(442.362790, 247.265420, 409.218420, 239.994580, 393.293880, 215.119470);
	ctx.bezierCurveTo(377.367610, 190.244110, 384.683480, 157.175020, 409.562190, 141.249940);
	ctx.bezierCurveTo(418.141550, 135.758650, 427.650370, 133.064360, 437.139060, 132.858390);
	ctx.bezierCurveTo(416.929670, 126.511220, 394.181380, 128.772830, 374.943620, 141.085200);
    ctx.scale(1/sf, 1/sf);
    ctx.closePath();
    ctx.scale(4, 4);

    return [];
});

shapeFunctions.set('pink_hashtag', (ctx: CanvasRenderingContext2D) => {

    ctx.scale(1/3,1/3);
	ctx.beginPath();
    ctx.scale(sf, sf);
	ctx.moveTo(66.660601, 59.539431);
	ctx.moveTo(-15.043961, -67.114874);
	ctx.bezierCurveTo(-18.313800, -67.114874, -21.483707, -65.817675, -23.969688, -63.461650);
	ctx.bezierCurveTo(-26.452065, -61.108377, -27.975591, -57.961284, -28.261528, -54.598326);
	ctx.lineTo(-29.398805, -41.194753);
	ctx.lineTo(-42.391592, -41.194753);
	ctx.bezierCurveTo(-45.661435, -41.194753, -48.831339, -39.896779, -51.317317, -37.540754);
	ctx.bezierCurveTo(-53.799696, -35.187516, -55.324118, -32.040034, -55.609163, -28.677076);
	ctx.bezierCurveTo(-55.905037, -25.188600, -54.844965, -21.891788, -52.625980, -19.395357);
	ctx.bezierCurveTo(-50.414209, -16.908205, -47.338299, -15.538687, -43.962920, -15.538687);
	ctx.lineTo(-31.577379, -15.538687);
	ctx.lineTo(-32.857175, -0.460797);
	ctx.lineTo(-45.849236, -0.460797);
	ctx.bezierCurveTo(-49.119082, -0.460797, -52.288623, 0.836437, -54.774604, 3.192462);
	ctx.bezierCurveTo(-57.256979, 5.545735, -58.780506, 8.692970, -59.066446, 12.055010);
	ctx.bezierCurveTo(-59.362321, 15.544475, -58.303512, 18.840299, -56.083624, 21.336730);
	ctx.bezierCurveTo(-53.872760, 23.823847, -50.795943, 25.193435, -47.420567, 25.193435);
	ctx.lineTo(-35.033943, 25.193435);
	ctx.lineTo(-36.118900, 37.975907);
	ctx.bezierCurveTo(-36.414775, 41.464418, -35.355966, 44.760628, -33.136078, 47.257978);
	ctx.bezierCurveTo(-30.925217, 49.745098, -27.848401, 51.114648, -24.473021, 51.114648);
	ctx.bezierCurveTo(-21.203175, 51.114648, -18.033454, 49.817448, -15.548373, 47.461388);
	ctx.bezierCurveTo(-13.065097, 45.108148, -11.540491, 41.960878, -11.255451, 38.598842);
	ctx.bezierCurveTo(-11.253651, 38.581202, -11.252051, 38.563562, -11.251251, 38.545922);
	ctx.lineTo(-10.118306, 25.193326);
	ctx.lineTo(4.482971, 25.194526);
	ctx.lineTo(3.398737, 37.975093);
	ctx.bezierCurveTo(3.101980, 41.464598, 4.161855, 44.760418, 6.380836, 47.256848);
	ctx.bezierCurveTo(8.591700, 49.744888, 11.668513, 51.114648, 15.043900, 51.114648);
	ctx.bezierCurveTo(18.313735, 51.114648, 21.483283, 49.817448, 23.969264, 47.461388);
	ctx.bezierCurveTo(26.451636, 45.108158, 27.976242, 41.961058, 28.262186, 38.598098);
	ctx.bezierCurveTo(28.263107, 38.587518, 28.263886, 38.576928, 28.264686, 38.566348);
	ctx.lineTo(29.399434, 25.195514);
	ctx.lineTo(42.392238, 25.195514);
	ctx.bezierCurveTo(42.420438, 25.195514, 42.446238, 25.195338, 42.473338, 25.194314);
	ctx.bezierCurveTo(45.714308, 25.173144, 48.852658, 23.877925, 51.317898, 21.541408);
	ctx.bezierCurveTo(53.800258, 19.188170, 55.324708, 16.040900, 55.609758, 12.678859);
	ctx.bezierCurveTo(55.905738, 9.190383, 54.846418, 5.894135, 52.626558, 3.396752);
	ctx.bezierCurveTo(50.415668, 0.909635, 47.338888, -0.459918, 43.956318, -0.459918);
	ctx.lineTo(31.576863, -0.459918);
	ctx.lineTo(32.857019, -15.537773);
	ctx.lineTo(45.848718, -15.537773);
	ctx.bezierCurveTo(49.118578, -15.537773, 52.288498, -16.835783, 54.774448, -19.191772);
	ctx.bezierCurveTo(57.256808, -21.544128, 58.781228, -24.692280, 59.066308, -28.054321);
	ctx.bezierCurveTo(59.362288, -31.542868, 58.303178, -34.838904, 56.084168, -37.335334);
	ctx.bezierCurveTo(53.872428, -39.823369, 50.795438, -41.192745, 47.412828, -41.192745);
	ctx.lineTo(35.034535, -41.192745);
	ctx.lineTo(36.118762, -53.974477);
	ctx.bezierCurveTo(36.415448, -57.463941, 35.356551, -60.759765, 33.136659, -63.256196);
	ctx.bezierCurveTo(30.925798, -65.743313, 27.848985, -67.113995, 24.473602, -67.113995);
	ctx.bezierCurveTo(21.203756, -67.113995, 18.033859, -65.816020, 15.547875, -63.459995);
	ctx.bezierCurveTo(13.065499, -61.107674, 11.541073, -57.960405, 11.256032, -54.597447);
	ctx.lineTo(10.117675, -41.192745);
	ctx.lineTo(-4.483245, -41.192745);
	ctx.lineTo(-3.398285, -53.975218);
	ctx.bezierCurveTo(-3.102410, -57.463729, -4.161402, -60.759942, -6.380384, -63.257289);
	ctx.bezierCurveTo(-8.592148, -65.744442, -11.668788, -67.113995, -15.044167, -67.113995);
	ctx.moveTo(-9.834935, -22.679328);
	ctx.lineTo(11.719884, -22.679328);
	ctx.bezierCurveTo(12.691359, -22.679328, 13.617742, -22.259064, 14.274420, -21.520842);
	ctx.bezierCurveTo(14.930188, -20.782585, 15.255823, -19.794984, 15.171032, -18.797364);
	ctx.lineTo(13.285793, 3.420074);
	ctx.bezierCurveTo(13.128842, 5.264713, 11.630578, 6.679104, 9.834647, 6.679104);
	ctx.lineTo(-11.720175, 6.679104);
	ctx.bezierCurveTo(-12.691654, 6.679104, -13.618037, 6.259581, -14.274712, 5.521358);
	ctx.bezierCurveTo(-14.930483, 4.783101, -15.256114, 3.795888, -15.171328, 2.798268);
	ctx.lineTo(-13.285008, -19.420263);
	ctx.bezierCurveTo(-13.128058, -21.264055, -11.629970, -22.679328, -9.834935, -22.679328);
    ctx.scale(1/sf, 1/sf);
    ctx.closePath();
    ctx.scale(3,3);

    return [];
});

shapeFunctions.set('brown_splat', (ctx: CanvasRenderingContext2D) => {

    ctx.scale(1/3,1/3);
    ctx.beginPath();    
    ctx.scale(sf, sf);
    ctx.transform(1, 0, 0, -1, -70.956253, 59.151274);
	ctx.moveTo(73.55, 120.05);
	ctx.bezierCurveTo(71.07, 119.51, 69.30, 117.68, 68.60, 114.95);
	ctx.bezierCurveTo(68.03, 112.76, 68.36, 108.54, 69.39, 104.51);
	ctx.bezierCurveTo(69.66, 103.49, 70.10, 101.77, 70.38, 100.70);
	ctx.bezierCurveTo(70.93, 98.56, 71.14, 97.42, 71.30, 95.75);
	ctx.bezierCurveTo(71.75, 90.82, 70.70, 86.83, 68.37, 84.63);
	ctx.bezierCurveTo(66.60, 82.96, 64.39, 82.29, 61.29, 82.51);
	ctx.bezierCurveTo(58.41, 82.71, 56.34, 83.59, 54.49, 85.40);
	ctx.bezierCurveTo(52.57, 87.29, 51.66, 89.03, 49.73, 94.59);
	ctx.bezierCurveTo(49.26, 95.94, 48.67, 97.52, 48.41, 98.10);
	ctx.bezierCurveTo(46.94, 101.40, 45.05, 102.90, 42.38, 102.90);
	ctx.bezierCurveTo(41.29, 102.90, 40.73, 102.71, 40.07, 102.10);
	ctx.bezierCurveTo(39.06, 101.17, 38.64, 99.96, 38.74, 98.25);
	ctx.bezierCurveTo(38.85, 96.36, 39.44, 94.77, 40.63, 93.20);
	ctx.bezierCurveTo(41.46, 92.11, 42.39, 91.22, 44.73, 89.31);
	ctx.bezierCurveTo(48.34, 86.35, 49.29, 84.97, 49.30, 82.65);
	ctx.bezierCurveTo(49.30, 80.93, 48.91, 79.90, 47.83, 78.84);
	ctx.bezierCurveTo(46.82, 77.83, 45.18, 77.10, 42.97, 76.65);
	ctx.bezierCurveTo(41.38, 76.34, 39.63, 76.15, 36.50, 75.95);
	ctx.bezierCurveTo(30.60, 75.58, 28.76, 75.18, 27.85, 74.06);
	ctx.bezierCurveTo(27.57, 73.71, 27.55, 73.62, 27.55, 72.87);
	ctx.bezierCurveTo(27.55, 71.86, 27.77, 71.36, 28.59, 70.48);
	ctx.bezierCurveTo(29.31, 69.70, 30.23, 69.00, 32.60, 67.45);
	ctx.bezierCurveTo(35.03, 65.86, 35.96, 65.16, 36.90, 64.21);
	ctx.bezierCurveTo(37.78, 63.32, 38.35, 62.50, 38.69, 61.60);
	ctx.bezierCurveTo(38.93, 61.00, 38.95, 60.83, 38.94, 59.45);
	ctx.bezierCurveTo(38.93, 58.13, 38.90, 57.84, 38.66, 57.07);
	ctx.bezierCurveTo(37.43, 52.97, 34.11, 50.98, 26.85, 49.96);
	ctx.bezierCurveTo(26.25, 49.87, 24.65, 49.69, 23.30, 49.55);
	ctx.bezierCurveTo(21.95, 49.41, 20.31, 49.22, 19.65, 49.14);
	ctx.bezierCurveTo(15.06, 48.57, 12.85, 47.64, 11.93, 45.89);
	ctx.bezierCurveTo(11.67, 45.40, 11.65, 45.26, 11.65, 44.30);
	ctx.bezierCurveTo(11.65, 43.40, 11.68, 43.19, 11.88, 42.83);
	ctx.bezierCurveTo(12.36, 41.92, 13.14, 41.39, 14.57, 40.98);
	ctx.bezierCurveTo(15.24, 40.79, 15.59, 40.75, 16.95, 40.76);
	ctx.bezierCurveTo(19.18, 40.76, 20.00, 40.99, 24.39, 42.86);
	ctx.bezierCurveTo(27.46, 44.18, 29.14, 44.80, 30.60, 45.19);
	ctx.bezierCurveTo(32.70, 45.74, 33.47, 45.84, 35.65, 45.84);
	ctx.bezierCurveTo(37.39, 45.84, 37.77, 45.82, 38.54, 45.62);
	ctx.bezierCurveTo(41.08, 44.98, 42.79, 43.71, 43.76, 41.75);
	ctx.bezierCurveTo(44.36, 40.51, 44.53, 39.68, 44.53, 37.90);
	ctx.bezierCurveTo(44.52, 35.47, 44.11, 33.60, 43.11, 31.55);
	ctx.bezierCurveTo(41.47, 28.18, 39.41, 26.16, 32.86, 21.49);
	ctx.bezierCurveTo(27.84, 17.92, 25.51, 15.59, 24.11, 12.75);
	ctx.bezierCurveTo(23.07, 10.64, 22.65, 8.68, 22.73, 6.30);
	ctx.bezierCurveTo(22.76, 5.09, 22.82, 4.72, 23.04, 4.03);
	ctx.bezierCurveTo(23.66, 2.13, 25.10, 0.79, 27.12, 0.24);
	ctx.bezierCurveTo(27.89, 0.03, 29.60, -0.05, 30.62, 0.09);
	ctx.bezierCurveTo(34.85, 0.66, 37.76, 3.06, 40.15, 7.95);
	ctx.bezierCurveTo(41.20, 10.11, 41.77, 11.62, 43.64, 17.30);
	ctx.bezierCurveTo(45.34, 22.46, 46.26, 24.94, 47.20, 26.80);
	ctx.bezierCurveTo(50.14, 32.68, 53.80, 35.34, 59.25, 35.57);
	ctx.bezierCurveTo(61.58, 35.67, 63.85, 35.27, 65.58, 34.45);
	ctx.bezierCurveTo(68.83, 32.91, 70.81, 30.12, 72.00, 25.45);
	ctx.bezierCurveTo(72.51, 23.45, 72.82, 21.47, 73.30, 17.10);
	ctx.bezierCurveTo(73.88, 11.86, 74.27, 9.87, 75.02, 8.35);
	ctx.bezierCurveTo(75.60, 7.17, 76.31, 6.46, 77.28, 6.09);
	ctx.bezierCurveTo(77.79, 5.90, 77.99, 5.88, 79.15, 5.93);
	ctx.bezierCurveTo(80.18, 5.97, 80.61, 6.03, 81.25, 6.23);
	ctx.bezierCurveTo(83.37, 6.92, 84.78, 8.41, 85.15, 10.36);
	ctx.bezierCurveTo(85.34, 11.31, 85.34, 11.77, 85.15, 12.64);
	ctx.bezierCurveTo(84.93, 13.67, 84.43, 14.57, 83.01, 16.49);
	ctx.bezierCurveTo(82.30, 17.45, 81.49, 18.62, 81.21, 19.08);
	ctx.bezierCurveTo(79.79, 21.46, 79.25, 24.22, 79.48, 27.87);
	ctx.bezierCurveTo(79.68, 31.03, 80.12, 32.95, 81.10, 34.95);
	ctx.bezierCurveTo(82.04, 36.89, 83.21, 38.10, 84.95, 38.95);
	ctx.bezierCurveTo(86.30, 39.61, 87.22, 39.81, 89.30, 39.87);
	ctx.bezierCurveTo(93.39, 40.00, 98.54, 39.38, 101.94, 38.35);
	ctx.bezierCurveTo(105.98, 37.12, 108.27, 35.81, 113.20, 31.89);
	ctx.bezierCurveTo(116.80, 29.03, 119.06, 28.10, 122.39, 28.10);
	ctx.bezierCurveTo(123.26, 28.10, 123.84, 28.15, 124.21, 28.26);
	ctx.bezierCurveTo(126.00, 28.79, 127.24, 30.12, 127.77, 32.10);
	ctx.bezierCurveTo(128.02, 33.00, 128.01, 35.19, 127.76, 36.09);
	ctx.bezierCurveTo(127.08, 38.57, 125.21, 40.20, 121.80, 41.28);
	ctx.bezierCurveTo(120.32, 41.75, 118.78, 42.06, 114.35, 42.80);
	ctx.bezierCurveTo(108.36, 43.80, 105.85, 44.44, 103.41, 45.61);
	ctx.bezierCurveTo(100.72, 46.89, 98.63, 48.84, 97.47, 51.15);
	ctx.bezierCurveTo(95.45, 55.19, 95.40, 61.54, 97.36, 65.78);
	ctx.bezierCurveTo(98.21, 67.63, 99.83, 69.54, 101.66, 70.86);
	ctx.bezierCurveTo(102.71, 71.62, 105.30, 72.92, 106.85, 73.49);
	ctx.bezierCurveTo(107.46, 73.71, 109.27, 74.29, 110.88, 74.79);
	ctx.bezierCurveTo(114.83, 76.02, 116.04, 76.52, 117.19, 77.38);
	ctx.bezierCurveTo(117.87, 77.89, 118.24, 78.34, 118.58, 79.07);
	ctx.bezierCurveTo(118.83, 79.60, 118.85, 79.75, 118.84, 80.80);
	ctx.bezierCurveTo(118.83, 82.17, 118.66, 82.91, 118.07, 84.05);
	ctx.bezierCurveTo(116.86, 86.37, 114.35, 87.61, 111.15, 87.48);
	ctx.bezierCurveTo(109.85, 87.42, 108.98, 87.13, 107.79, 86.34);
	ctx.bezierCurveTo(106.73, 85.65, 104.89, 83.75, 103.04, 81.45);
	ctx.bezierCurveTo(101.06, 79.00, 100.14, 77.96, 99.24, 77.18);
	ctx.bezierCurveTo(97.06, 75.30, 95.87, 75.00, 91.75, 75.31);
	ctx.bezierCurveTo(84.16, 75.87, 80.26, 78.41, 78.40, 83.99);
	ctx.bezierCurveTo(77.65, 86.22, 77.30, 88.90, 77.30, 92.30);
	ctx.bezierCurveTo(77.30, 96.13, 77.68, 97.76, 79.55, 101.95);
	ctx.bezierCurveTo(81.34, 105.97, 81.83, 108.08, 81.84, 111.85);
	ctx.bezierCurveTo(81.85, 113.43, 81.82, 113.75, 81.62, 114.48);
	ctx.bezierCurveTo(81.16, 116.18, 80.47, 117.34, 79.26, 118.47);
	ctx.bezierCurveTo(77.71, 119.91, 75.60, 120.50, 73.55, 120.05);
    ctx.scale(1/sf, 1/sf);
    ctx.closePath();
    ctx.scale(3,3);

    return [];
});

shapeFunctions.set('empty_set', (ctx: CanvasRenderingContext2D) => {
    
    ctx.scale(2/7, 2/7);
    ctx.beginPath();    
    ctx.scale(sf, sf);
	ctx.moveTo(18.066960, -33.593032);
	ctx.bezierCurveTo(17.937116, -34.945908, 17.624489, -35.265144, 15.303533, -36.414909);
	ctx.bezierCurveTo(13.864187, -37.127948, 10.308861, -38.313716, 7.402817, -39.049953);
	ctx.bezierCurveTo(-6.425702, -42.553351, -19.453999, -39.314305, -29.359582, -29.910263);
	ctx.bezierCurveTo(-37.501128, -22.180935, -42.050267, -10.684000, -41.347053, 0.385397);
	ctx.bezierCurveTo(-41.013532, 5.635746, -39.972946, 9.549568, -37.152261, 16.163069);
	ctx.lineTo(-34.942449, 21.344279);
	ctx.lineTo(-8.364535, -5.361649);
	ctx.bezierCurveTo(17.139857, -30.988877, 18.207467, -32.129190, 18.066960, -33.593032);
	ctx.moveTo(5.603533, 40.114884);
	ctx.bezierCurveTo(18.443087, 38.252884, 30.195076, 29.803314, 35.721066, 18.460658);
	ctx.bezierCurveTo(38.275666, 13.217072, 38.869516, 10.218417, 38.842216, 2.700461);
	ctx.bezierCurveTo(38.812316, -5.501334, 37.619886, -11.694394, 34.983536, -17.338568);
	ctx.lineTo(33.192096, -21.173866);
	ctx.lineTo(19.886003, -7.949570);
	ctx.bezierCurveTo(5.092643, 6.752854, -12.419700, 24.558808, -16.754248, 29.304984);
	ctx.bezierCurveTo(-18.576124, 31.299864, -19.583283, 32.791904, -19.583283, 33.495994);
	ctx.bezierCurveTo(-19.583283, 34.804184, -18.010991, 36.027254, -14.540973, 37.418404);
	ctx.bezierCurveTo(-7.406745, 40.278564, -1.228098, 41.105614, 5.603533, 40.114884);
	ctx.moveTo(-70.961668, 72.098354);
	ctx.bezierCurveTo(-72.007521, 71.215564, -72.848172, 69.767224, -73.254683, 68.147744);
	ctx.bezierCurveTo(-74.310054, 63.943354, -73.110785, 62.108514, -61.628224, 50.359954);
	ctx.bezierCurveTo(-56.064325, 44.667154, -51.512034, 39.823104, -51.512034, 39.595414);
	ctx.bezierCurveTo(-51.512034, 39.367754, -52.884405, 36.746844, -54.561735, 33.771244);
	ctx.bezierCurveTo(-58.102513, 27.489874, -61.680206, 17.244693, -63.009578, 9.579806);
	ctx.bezierCurveTo(-65.363319, -3.991429, -61.413282, -22.264582, -53.589285, -33.999130);
	ctx.bezierCurveTo(-50.286636, -38.952503, -42.060615, -47.482443, -36.981141, -51.220879);
	ctx.bezierCurveTo(-21.607703, -62.535576, 0.534450, -65.806397, 19.745235, -59.600455);
	ctx.bezierCurveTo(22.204314, -58.806068, 27.589996, -56.396781, 31.713436, -54.246479);
	ctx.lineTo(39.210586, -50.336856);
	ctx.lineTo(44.284316, -55.795686);
	ctx.bezierCurveTo(50.534776, -62.520561, 59.178086, -70.298349, 62.013226, -71.749269);
	ctx.bezierCurveTo(63.178396, -72.345549, 64.837846, -72.833439, 65.700876, -72.833439);
	ctx.bezierCurveTo(69.748316, -72.833439, 73.929256, -67.197129, 72.560576, -63.585937);
	ctx.bezierCurveTo(71.640246, -61.157693, 66.840296, -55.429127, 58.367846, -46.647432);
	ctx.lineTo(50.817656, -38.821666);
	ctx.lineTo(54.663266, -30.728187);
	ctx.bezierCurveTo(59.200806, -21.178501, 61.029016, -15.963500, 62.199266, -9.231772);
	ctx.bezierCurveTo(64.012526, 1.198819, 62.785926, 11.912655, 58.527336, 22.841222);
	ctx.bezierCurveTo(48.469396, 48.652304, 26.793386, 63.400694, -1.083752, 63.400694);
	ctx.bezierCurveTo(-12.913562, 63.400694, -21.748215, 61.004524, -33.291158, 54.665244);
	ctx.bezierCurveTo(-36.333509, 52.994414, -39.085355, 51.627384, -39.406377, 51.627384);
	ctx.bezierCurveTo(-39.727406, 51.627384, -44.405839, 56.008504, -49.802924, 61.363214);
	ctx.bezierCurveTo(-55.311645, 66.828704, -60.647873, 71.623884, -61.968783, 72.295584);
	ctx.bezierCurveTo(-65.257998, 73.968204, -68.839478, 73.889654, -70.961668, 72.098364);
    ctx.scale(1/sf, 1/sf);
    ctx.closePath();
    ctx.scale(3.5,3.5);

    return [];
});

shapeFunctions.set('infinity', (ctx: CanvasRenderingContext2D) => {

    ctx.beginPath();
    ctx.scale(sf, sf);
    ctx.scale(1.1, 1.1);
    ctx.translate(-91.082135, -80.110718);
	ctx.transform(2.128652, 0.000000, 0.000000, 2.476848, -78.229708, -213.117530);
	ctx.moveTo(84.443554, 124.560580);
	ctx.bezierCurveTo(86.918780, 124.464380, 89.392846, 122.020230, 89.392110, 117.589850);
	ctx.bezierCurveTo(89.392110, 117.082880, 88.432933, 116.691020, 87.515841, 116.429290);
	ctx.bezierCurveTo(86.129485, 111.085710, 80.894815, 111.014250, 78.815855, 115.177200);
	ctx.bezierCurveTo(76.486172, 109.953160, 69.685595, 111.837180, 69.686815, 119.181050);
	ctx.bezierCurveTo(69.686815, 119.688130, 70.646062, 120.081250, 71.562529, 120.342240);
	ctx.bezierCurveTo(72.949924, 125.686470, 78.184271, 125.757920, 80.263070, 121.594340);
	ctx.bezierCurveTo(81.188027, 123.667360, 82.815125, 124.623690, 84.443554, 124.560580);
	ctx.moveTo(83.404271, 120.906820);
	ctx.bezierCurveTo(82.731479, 120.875120, 82.029116, 120.638010, 81.439628, 120.352810);
	ctx.bezierCurveTo(80.979448, 115.091150, 84.019975, 115.515670, 85.906337, 116.429290);
	ctx.bezierCurveTo(86.222708, 120.046690, 84.884415, 120.975850, 83.404271, 120.906820);
	ctx.moveTo(75.136667, 120.896220);
	ctx.bezierCurveTo(74.463876, 120.864520, 73.761523, 120.627410, 73.172033, 120.342210);
	ctx.bezierCurveTo(72.711854, 115.080550, 75.752370, 115.504430, 77.638733, 116.418060);
    ctx.bezierCurveTo(77.955104, 120.035450, 76.616822, 120.965250, 75.136667, 120.896220);
    ctx.transform(1/2.128652, 0.000000, 0.000000, 1/2.476848, 0, 0);
    ctx.scale(1/1.1, 1/1.1);
    ctx.scale(1/sf, 1/sf);
    ctx.closePath();

    return [];
});

export default (
    ctx: CanvasRenderingContext2D,
    suit: Suit,
    shadow: boolean,
    deckBack: boolean,
) => {
    // Each suit has a shape defined in the "suits.json" file (as the "pip" property)
    const shapeFunction = shapeFunctions.get(suit.pip);
    if (!shapeFunction) {
        throw new Error(`Failed to find the shape function for pip "${suit.pip}".`);
    }

    // Draw the respective shape on the canvas
    // (or, for text pips, define the type of text)
    const textValues = shapeFunction(ctx);

    // Determine the fill
    if (deckBack) {
        // Pips on the back of the deck should be gray
        ctx.fillStyle = '#444444';
    } else if (suit.fill === 'multi') {
        // Rainbow and omni cards have a gradient fill
        // Generate a radial gradient that is evenly distributed between its component colors
        const gradient = ctx.createLinearGradient(470, 650, 650, 650);
        for (let i = 0; i < suit.fillColors.length; ++i) {
            gradient.addColorStop(i / (suit.fillColors.length - 1), suit.fillColors[i]);
        }
        ctx.fillStyle = gradient;
    } else {
        // All other suits have a solid fill
        ctx.fillStyle = suit.fill;
    }

    // Fill in the shape
    if (shadow) {
        ctx.shadowColor = 'rgba(0, 0, 0, 0.9)';
    }
    if (textValues.length > 0) {
        ctx.fillText(textValues[0], textValues[1], textValues[2]);
    } else {
        ctx.fill();
    }

    // Draw a black border around the shape
    ctx.lineWidth = deckBack ? 8 : 5;
    if (shadow) {
        ctx.shadowColor = 'rgba(0, 0, 0, 0)';
    }
    if (textValues.length > 0) {
        ctx.strokeText(textValues[0], textValues[1], textValues[2]);
    } else {
        ctx.stroke();
    }
};
